@page "/"

<style>
    .search-main {
        margin-top: 30px;
        display: flex;
        flex-direction: row;
    }

    .search-main .dxbl-text-edit {
        width: 50%;
    }

    .search-main svg {
        margin-right: 15px;
    }

    .cont-search-bar {
        display: flex;
        flex-direction: column;
        width: 100%;
    }

    .cont-item-search-bar {
        width: 50%;
    }

    .item-search-bar {
        background: grey;
        height: 30px;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        padding: 10px;
    }

        .item-search-bar:hover {
            background: lightgrey;
            color: black;
        }

    .form-index
    {
        margin-top: 60px;
        border : 1px solid darkgray;
        padding : 20px;
        border-radius : 6px;
    }

</style>

<h3>Rechercher un Produit</h3>

@inject HttpClient http



<div class="search-main">
    <div @onclick="Search" style="cursor : pointer">
        <svg width="29" height="29" viewBox="0 0 29 29" fill="none" xmlns="http://www.w3.org/2000/svg" class="test">
            <g clip-path="url(#clip0_844_453)">
                <path d="M21.2824 18.7486C23.0374 16.3537 23.8235 13.3844 23.4833 10.4349C23.1431 7.48534 21.7018 4.77299 19.4477 2.84048C17.1936 0.907979 14.2929 -0.102158 11.326 0.0121616C8.35912 0.126482 5.54478 1.35683 3.44606 3.45706C1.34733 5.55728 0.119001 8.3725 0.00680441 11.3395C-0.105393 14.3065 0.90682 17.2064 2.84094 19.4591C4.77505 21.7119 7.48843 23.1512 10.4382 23.4893C13.388 23.8274 16.3567 23.0392 18.7503 21.2824H18.7485C18.8029 21.3549 18.8609 21.4238 18.9261 21.4909L25.9043 28.469C26.2441 28.8091 26.7052 29.0003 27.186 29.0004C27.6668 29.0006 28.1279 28.8098 28.468 28.4699C28.8081 28.13 28.9993 27.669 28.9995 27.1882C28.9996 26.7074 28.8088 26.2462 28.4689 25.9061L21.4908 18.928C21.426 18.8624 21.3563 18.8036 21.2824 18.7486ZM21.75 11.7813C21.75 13.0904 21.4922 14.3867 20.9912 15.5962C20.4902 16.8057 19.7559 17.9046 18.8302 18.8303C17.9045 19.756 16.8056 20.4903 15.5961 20.9912C14.3867 21.4922 13.0904 21.7501 11.7813 21.7501C10.4721 21.7501 9.17585 21.4922 7.96638 20.9912C6.75692 20.4903 5.65797 19.756 4.73229 18.8303C3.8066 17.9046 3.07231 16.8057 2.57134 15.5962C2.07036 14.3867 1.81251 13.0904 1.81251 11.7813C1.81251 9.13743 2.86279 6.60184 4.73229 4.73234C6.60179 2.86284 9.13738 1.81256 11.7813 1.81256C14.4251 1.81256 16.9607 2.86284 18.8302 4.73234C20.6997 6.60184 21.75 9.13743 21.75 11.7813Z" fill="#FFFFFF" />
            </g>
            <defs>
                <clipPath id="clip0_844_453">
                    <rect width="29" height="29" fill="white" />
                </clipPath>
            </defs>
        </svg>
    </div>

    <div class="cont-search-bar">
        <DxTextBox
                   ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                   BindValueMode="BindValueMode.OnInput"
                   NullText="Entrez un nom de produit..."
                   InputId="tbInputBinding" 
                   TextChanged="(value) => SearchDynamic(value)"
                   @onkeypress="EnterPressed"/>
        <div class="cont-item-search-bar">
    
            @if (keys.Count() > 0)
            {
                @foreach(var k in keys)
                {
                    <div class="item-search-bar" @onclick="@(() => SearchRedis(k))">@k</div>
                }
            }
        </div>
    </div>
</div>

@if (prod != null)
{
    <div class="form-index">
        <DxFormLayout>
            <DxFormLayoutItem Caption="Nom du produit:" ColSpanMd="12">
                <DxTextBox ReadOnly="@editMode" Text="@prod.Name" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Prix :" ColSpanMd="12">
                <DxSpinEdit ReadOnly="@editMode" Value="@(Convert.ToInt32(prod.Price))" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Description :" ColSpanMd="12">
                <DxTextBox ReadOnly="@editMode" Text="@prod.Description" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Stock :" ColSpanMd="12">
                <DxSpinEdit ReadOnly="@editMode" Value="@(Convert.ToInt32(prod.Stock))" />
            </DxFormLayoutItem>
           
        </DxFormLayout>
    </div>

} else 
{
    <div class="form-index" hidden="@(noData == null)">
        <h4>
            @noData
        </h4>
    </div>
}

@code{
    string search = "";
    List<string> keys = new List<string>();
    Gerardr_Projet_NoSql.Models.Products? prod = null;
    bool editMode = false;
    string noData = null;

    protected async Task SearchDynamic(string search) {

        this.search = search;
        noData = null;

        if(search != "" && search != null) {
            Console.WriteLine(search);
            keys = await http.GetFromJsonAsync<List<string>>($"api/products/cache/scan/{search}");
            Console.WriteLine(keys);
            StateHasChanged();
        } 
        else
        {
            keys = new List<string>();
            this.search = "";
        }

    }

    protected async Task SearchRedis(string search) {

        var res  = await http.GetFromJsonAsync<Gerardr_Projet_NoSql.Models.Products>($"api/products/cache/{search}");

        if(res != null)
        {
            prod = res;
        }

        keys = new List<string>();
        StateHasChanged();

    }

    protected async Task Search()
    {

        var resRedis = await http.GetFromJsonAsync<Gerardr_Projet_NoSql.Models.Products>($"api/products/cache/{search}");
        if(resRedis.Name == null)
        {
            var res = await http.GetFromJsonAsync<Gerardr_Projet_NoSql.Models.Products>($"api/products/{search}");
            if (res.Name != null)
            {
                prod = res;
                await http.PostAsJsonAsync("api/products/cache", prod);
            }
            else
            {
                prod = null;
                noData = "Aucun produit trouvé";
            }
        }else
        {
            prod = resRedis;
        }

        StateHasChanged();
    }

    protected async void EnterPressed(KeyboardEventArgs e)
    {
        if(e.Code == "Enter")
        {
            keys = new List<string>();
            await Search();
        }
    }
}